# Rufus Web Extractor Configuration

# Model Configuration
model:
  name: openai  # Default model (ollama or openai)
  supported_models: 
    - ollama
    - openai
  temperature: 0.7
  max_tokens: 500

# Crawling Parameters
crawler:
  max_depth: 3
  max_pages: 100
  respect_robots: true
  crawl_delay: 0.5  # Delay between requests in seconds

# Parallelization Settings
parallel:
  enabled: true
  max_workers: 5

# Relevance and Content Extraction
relevance:
  threshold: 0.5  # Minimum relevance score for content inclusion

# Embedding and Vector Store Configuration
vector_store:
  embedding_model: all-MiniLM-L6-v2
  persist_directory: vectorstore

# Retrieval-Augmented Generation (RAG) Settings
rag:
  top_k_documents: 10  # Number of top documents to retrieve
  chunk_size: 3000    # Text chunk size for embedding
  chunk_overlap: 500  # Overlap between text chunks

# Logging Configuration
logging:
  level: INFO
  output_directory: logs
  log_format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

# Output and Results
output:
  directory: output
  formats:
    - json
    - csv

# API Configuration
api:
  host: 0.0.0.0
  port: 8234
  url: http://localhost:8234
  cors_origins:
    - http://localhost:3000
    - http://127.0.0.1:3000    

# Gradio UI Configuration
gradio:
  host: 0.0.0.0
  port: 7860
  share: false
  models:
    - ollama
    - openai

# Optional: Custom Instructions Template
instructions_template: >
  Extract comprehensive information about the website.
  Focus on key content, structure, and relevant details.
  Prioritize accuracy and context.

# Advanced Extraction Settings
extraction:
  image_alt_text: true
  extract_tables: true
  extract_links: true
  clean_html: true

# Rate Limiting and Security
rate_limiting:
  requests_per_minute: 10
  concurrent_requests: 3

# Experimental Features
experimental:
  multimodel_comparison: false
  advanced_relevance_scoring: false